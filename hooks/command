#!/bin/bash
set -euo pipefail

CLUBHOUSE_API_TOKEN="$BUILDKITE_PLUGIN_CLUBHOUSE_BUILDKITE_STATUS_BADGE_CLUBHOUSE_API_TOKEN"
GITHUB_BRANCH_NAME="$BUILDKITE_PLUGIN_CLUBHOUSE_BUILDKITE_STATUS_BADGE_GITHUB_BRANCH_NAME"
PIPELINE_URL="$BUILDKITE_PLUGIN_CLUBHOUSE_BUILDKITE_STATUS_BADGE_BUILDKITE_PIPELINE_URL"
PIPELINE_BADGE_URL="$BUILDKITE_PLUGIN_CLUBHOUSE_BUILDKITE_STATUS_BADGE_BUILDKITE_PIPELINE_BADGE_URL"

regex="ch([0-9]*)"
pipeline_badge="[![Build status]($PIPELINE_BADGE_URL?branch=$GITHUB_BRANCH_NAME)]($PIPELINE_URL)"

echo "--- Parse Clubhouse Ticket from Branch name"
if [[ $GITHUB_BRANCH_NAME =~ $regex ]]
then
    clubhouse_story_id="${BASH_REMATCH[1]}"
else 
    echo "unable to determine clubhouse story id"
    return -1
fi


story=$(curl -X GET \
    -H "Content-Type: application/json" \
    -H "Clubhouse-Token: ${CLUBHOUSE_API_TOKEN}" \
    -L "https://api.clubhouse.io/api/v3/stories/${clubhouse_story_id}")

story_tasks=$(jq '.tasks[]' <<< "${story}")
build_status_task=$(jq -c 'select(.description | contains("Build status"))' <<< "${story_tasks}")

generate_build_stats_task_payload()
{
cat <<EOF
{
    "description": "$pipeline_badge"
}
EOF
}

if [ -z "$build_status_task" ]
then
    echo "--- creating the build status task"
    story=$(curl -X POST \
        -H "Content-Type: application/json" \
        -H "Clubhouse-Token: ${CLUBHOUSE_API_TOKEN}" \
        -d "$(generate_build_stats_task_payload)" \
        -L "https://api.clubhouse.io/api/v3/stories/${clubhouse_story_id}/tasks")
else
    echo "--- build status task already exists"
fi
